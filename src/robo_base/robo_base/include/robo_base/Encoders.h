// Generated by gencpp from file xbot/Encoders.msg
// DO NOT EDIT!


#ifndef XBOT_MESSAGE_ENCODERS_H
#define XBOT_MESSAGE_ENCODERS_H

#include <ros/service_traits.h>


//#include <xbot/EncodersRequest.h>
//#include <xbot/EncodersResponse.h>

#include "xbot/EncodersRequest.h"
#include "xbot/EncodersResponse.h"

namespace xbot
{

struct Encoders
{

typedef EncodersRequest Request;
typedef EncodersResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct Encoders
} // namespace xbot


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::xbot::Encoders > {
  static const char* value()
  {
    return "72566fc3158c2d1babe99b8a01ddd089";
  }

  static const char* value(const ::xbot::Encoders&) { return value(); }
};

template<>
struct DataType< ::xbot::Encoders > {
  static const char* value()
  {
    return "xbot/Encoders";
  }

  static const char* value(const ::xbot::Encoders&) { return value(); }
};


// service_traits::MD5Sum< ::xbot::EncodersRequest> should match 
// service_traits::MD5Sum< ::xbot::Encoders > 
template<>
struct MD5Sum< ::xbot::EncodersRequest>
{
  static const char* value()
  {
    return MD5Sum< ::xbot::Encoders >::value();
  }
  static const char* value(const ::xbot::EncodersRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::xbot::EncodersRequest> should match 
// service_traits::DataType< ::xbot::Encoders > 
template<>
struct DataType< ::xbot::EncodersRequest>
{
  static const char* value()
  {
    return DataType< ::xbot::Encoders >::value();
  }
  static const char* value(const ::xbot::EncodersRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::xbot::EncodersResponse> should match 
// service_traits::MD5Sum< ::xbot::Encoders > 
template<>
struct MD5Sum< ::xbot::EncodersResponse>
{
  static const char* value()
  {
    return MD5Sum< ::xbot::Encoders >::value();
  }
  static const char* value(const ::xbot::EncodersResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::xbot::EncodersResponse> should match 
// service_traits::DataType< ::xbot::Encoders > 
template<>
struct DataType< ::xbot::EncodersResponse>
{
  static const char* value()
  {
    return DataType< ::xbot::Encoders >::value();
  }
  static const char* value(const ::xbot::EncodersResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // XBOT_MESSAGE_ENCODERS_H
